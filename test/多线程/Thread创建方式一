/**
 * 方式一、继承于Thread类
 *         1.创建一个继承于Thread类的子类
 *         2.重写Thread类的run() --> 将此线程执行的操作声明在run()中
 *         3.创建Thread类的子类的对象
 *         4.通过此对象调用start()
 *         <p>例子：遍历100以内的所有偶数
 * @author zhoufei
 * @create 2021-01-03-15:52
 */
/**
 * 练习：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数
 * @author zhoufei
 * @create 2021-01-03-21:01
 */
public class ThreadDemo {
    public static void main(String[] args) {
//        MyThread1 t1 = new MyThread1();
//        MyThread2 t2 = new MyThread2();
//        t1.start();
//        t2.start();
        //创建Thread类的匿名子类
        new Thread(){
            @Override
            public void run() {
                for (int i = 0;i < 100;i++){
                    if (i % 2 == 0){
                        System.out.println(Thread.currentThread().getName() + ":" + i);
                    }
                }
            }
        }.start();
        new Thread(){
            @Override
            public void run() {
                for (int i = 0;i < 100;i++){
                    if (i % 2 != 0){
                        System.out.println(Thread.currentThread().getName() + ":" + i);
                    }
                }
            }
        }.start();
    }
}
//class MyThread1 extends Thread{
//    @Override
//    public void run() {
//        for (int i = 0;i < 100;i++){
//            if (i % 2 == 0){
//                System.out.println(Thread.currentThread().getName() + ":" + i);
//            }
//        }
//    }
//}
//class MyThread2 extends Thread{
//    @Override
//    public void run() {
//        for (int i = 0;i < 100;i++){
//            if (i % 2 != 0){
//                System.out.println(Thread.currentThread().getName() + ":" + i);
//            }
//        }
//    }
//}
